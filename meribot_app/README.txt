README - CreaciÃ³n de Chatbot Empresarial con GitHub Copilot
Este documento describe cÃ³mo construir un chatbot modular utilizando GitHub Copilot, basado en una arquitectura empresarial distribuida en capas. Cada componente puede desarrollarse como microservicio o mÃ³dulo independiente.

Resumen de la arquitectura (basado en el documento):
 - El scraper extrae info de la intranet (automatizado por cron).
 - Los datos van a una base vectorial ChromaDB
 - El BBDD vectorial ChromaDB deberia funcionar inicialmente local (dev)
 - El servidor FastAPI expone una API REST y conecta con LangChain.
 - El widget web (HTML/JS) se integra en el portal y se comunica por HTTP con FastAPI.
 - Todo el acceso es indirecto: el usuario nunca toca datos o modelos directamente.
 - Seguridad y simplicidad: sin cambios en el portal, sin exponer lÃ³gica interna, sin acceso en tiempo real a sistemas fuente

============================================================
ðŸ”¹ Capa de InteracciÃ³n del Usuario
============================================================
Usuario (PC)
 â””â”€â”€ Navegador Web
      â””â”€â”€ Widget Meri-bot (JS embebido)
           â””â”€â”€ ComunicaciÃ³n vÃ­a HTTP/REST con Servidor Web

- El widget se desarrolla en JavaScript y se embebe en la intranet.
- Se comunica con el backend vÃ­a peticiones HTTP (POST/GET).
- Requiere una interfaz amigable para capturar y mostrar respuestas.

============================================================
ðŸ”¹ Capa de Servidor Web CECA (Intranet)
============================================================
Servidor Web CECA â€“ Intranet C&C&A
 â””â”€â”€ Sirve la PÃ¡gina Web Intranet
      â””â”€â”€ Embebe el chatbot Meri-bot

- Utiliza un simple python -m http.server (es suficiente para hacer pruebas locales).
- Asegura la integraciÃ³n con la red interna y autenticaciÃ³n corporativa.

============================================================
ðŸ”¹ Capa de LÃ³gica de la AplicaciÃ³n (Contenedor)
============================================================
Contenedor Docker
 |â”€â”€ Servicio FastAPI
 â”‚    â””â”€â”€ Endpoint: /chatbot/query
 â”‚    â””â”€â”€ Recibe peticiones del Widget
 â””â”€â”€ LÃ³gica LangChain
      â””â”€â”€ Procesa la consulta
      â””â”€â”€ Accede a herramientas (retrieval, chains, agents)
      â””â”€â”€ Consulta la base vectorial si es necesario

- FastAPI gestiona las peticiones y respuestas.
- LangChain permite el uso de LLMs y recuperaciÃ³n semÃ¡ntica.
- Docker facilita el despliegue y escalabilidad.

============================================================
ðŸ”¹ Capa de RecopilaciÃ³n de Datos
============================================================
Scraper Host
 |â”€â”€ Cron Job
 â”‚    â””â”€â”€ Ejecuta tareas periÃ³dicas
 â””â”€â”€ WebScraper (Python CLI)
      â””â”€â”€ Extrae datos de la intranet
      â””â”€â”€ Genera embeddings
      â””â”€â”€ Inserta en ChromaDB

- El scraper se ejecuta automÃ¡ticamente o manualmente.
- Extrae polÃ­ticas, documentaciÃ³n y procedimientos internos.
- Los datos se transforman en vectores para bÃºsqueda semÃ¡ntica.

============================================================
ðŸ”¹ Capa de Almacenamiento de Datos
============================================================
Base de Datos Vectorial
 â”œâ”€â”€ ChromaDB
 â”‚    â””â”€â”€ Almacena embeddings
 â”‚    â””â”€â”€ Permite bÃºsqueda semÃ¡ntica
 â””â”€â”€ Accesible por LangChain vÃ­a retrievers

- ChromaDB se utilizan para almacenar vectores.
- Permiten bÃºsquedas rÃ¡pidas y relevantes desde LangChain.

============================================================
ðŸ”¹ Capa Administrativa
============================================================
Herramienta meri-cli (CLI)
 |â”€â”€ GestiÃ³n del Scraper Host
 â”‚    â””â”€â”€ Ejecutar scraping manual
 â”‚    â””â”€â”€ Ver logs / errores
 â””â”€â”€ GestiÃ³n de la Base Vectorial
      â””â”€â”€ Validar ingestas
      â””â”€â”€ Limpiar vectores
      â””â”€â”€ Ajustar Ã­ndices
      â””â”€â”€ Sincronizar datos

- meri-cli es una herramienta en Python para administraciÃ³n tÃ©cnica.
- Permite control total sin afectar el flujo conversacional.

============================================================
ðŸ”„ Flujo General
============================================================
1. Usuario â†’ Widget â†’ Servidor Web
2. Servidor Web â†’ FastAPI â†’ LangChain
3. LangChain â†’ Base Vectorial â†’ Recupera informaciÃ³n
4. LangChain â†’ Respuesta â†’ FastAPI â†’ Widget â†’ Usuario
5. Scraper Host â†’ Extrae datos â†’ Embeddings â†’ Base Vectorial
6. meri-cli â†’ Administra scraping y base vectorial

============================================================
âœ… Recomendaciones
============================================================
- Utiliza GitHub Copilot para acelerar el desarrollo de cada mÃ³dulo.
- Documenta cada componente en su propio README.
- Usa Docker Compose para orquestar los servicios.
- Implementa pruebas unitarias para FastAPI y el scraper.
- La aplicaciÃ³n se desarrolla como monorepositorio
- La estructura basado en un unico module "meribot" ( - no es valido en nombres de Python)
- Tener submodules (por ejemplo, meribot.api, meribot.crawler, etc.) segÃºn cada capa definida mÃ¡s arriba
